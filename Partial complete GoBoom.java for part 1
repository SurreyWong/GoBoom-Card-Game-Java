import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Scanner;

public class GoBoom {
private ArrayList<String> cardDeck;
private LinkedList<LinkedList<String>> playersCards;
private ArrayList<String> centerCards;
public String centerSuit;
private int currentPlayerIndex;
public int currentRoundIndex;
private int[] scores;

public GoBoom() {
    cardDeck = new ArrayList<>();
    String[] suit = {"H", "D", "C", "S"};
    String[] rank = {"A", "K", "Q", "J", "X", "9", "8", "7", "6", "5", "4", "3", "2"};

    for (int i = 0; i < suit.length; i++){
        for(int j = 0; j < rank.length; j++){
            cardDeck.add(suit[i] + rank[j]);
        }
    }

    Collections.shuffle(cardDeck); //shuffle the cards to randomise it
    System.out.println(cardDeck);

    scores = new int[4]; //scores intialize to 0
}

//distribute 7 cards to each player
public void playersCard() {
    playersCards = new LinkedList<>();
    for (int i = 0; i < 4; i++) {
        LinkedList<String> cardPlayer = new LinkedList<>();
        for (int j = 0; j < 7; j++) {
            cardPlayer.add(cardDeck.remove(0));
        }
        playersCards.add(cardPlayer);
    }
}

public void setCenterCards() {
    centerCards = new ArrayList<>();
    String leadCard = cardDeck.remove(0);
    centerCards.add(leadCard);
    centerSuit = String.valueOf(leadCard.charAt(0));
}

public void playerTurn() {
    char turn = centerCards.get(0).charAt(1);
    int playerTurn = 1;
    switch (turn) {
        case 'A':
        case '5':
        case '9':
        case 'K':
            playerTurn = 1;
            break;
        case '2':
        case '6':
        case 'X':
            playerTurn = 2;
            break;
        case '3':
        case '7':
        case 'J':
            playerTurn = 3;
            break;
        case '4':
        case '8':
        case 'Q':
            playerTurn = 4;
            break;
        default:
            System.out.println("Unknown turn value");
    }
    currentPlayerIndex = playerTurn - 1;
}

public void gameStatus() {
    System.out.println("\nTrick #" + (currentRoundIndex + 1)); //set the number of round
    for (int i = 0; i < playersCards.size(); i++) {
        System.out.println("Player " + (i + 1) + " Cards: " + playersCards.get(i));
    }
    System.out.println("Center Cards  : " + centerCards);
    System.out.println("Deck          : " + cardDeck);
    System.out.print("Scores        : " );
    for (int i = 0; i < scores.length; i++) {
        System.out.print("Player " + (i + 1) + " = " + scores[i] + " | ");
    }
    System.out.println();
}

public boolean isValidPlay(String card) {
    String suit = card.substring(0, 1);
    String rank = card.substring(1);
    String leadCard = centerCards.get(0);
    String leadSuit = leadCard.substring(0, 1);
    String leadRank = leadCard.substring(1);

    return suit.equals(leadSuit) || rank.equals(leadRank);
}

public String drawCardFromDeck() {
    return cardDeck.remove(0);
}

private void scoreUpdated() {
    scores[currentPlayerIndex]++;
}

private boolean isCardPlayable(LinkedList<String> playerCards) {
    for (String card : playerCards) {
        if (isValidPlay(card)) {
            return true;
        }
    }
    return false;
}

public void playTurn() throws IOException {
    LinkedList<String> currentPlayerCards = playersCards.get(currentPlayerIndex);

    System.out.println("\nPlayer " + (currentPlayerIndex + 1) + "'s turn.");

    // check if the deck is empty and player's card is not playable, player will be skipped
    if (cardDeck.isEmpty() && !isCardPlayable(currentPlayerCards)) {
        System.out.println("The Deck is empty and Player " + (currentPlayerIndex + 1) + "'s cards cannot be played. Skip to next player...");
        currentPlayerIndex = (currentPlayerIndex + 1) % playersCards.size(); // Move to the next player
        return;
    }

    System.out.print("Enter a card to play (or 'draw' to draw a card): ");
    Scanner userInput = new Scanner(System.in);
    String input = userInput.nextLine().toUpperCase();

    while (!input.equals("DRAW") && !currentPlayerCards.contains(input)) {
        System.out.print("Invalid card! Enter a valid card or 'draw': ");
        input = userInput.nextLine().toUpperCase();
    }

    if (input.equals("DRAW")) {
        // Draw cards until a valid card can be played
        String drawnCard = drawCardFromDeck();
        currentPlayerCards.add(drawnCard);
        System.out.println("Player " + (currentPlayerIndex + 1) + " drew a card: " + drawnCard);
    
        while (!isValidPlay(drawnCard)) {
            System.out.println("Drawn card cannot be played. Drawing another card...");
            drawnCard = drawCardFromDeck();
            currentPlayerCards.add(drawnCard);
            System.out.println("Player " + (currentPlayerIndex + 1) + " drew a card: " + drawnCard);
        }
    
        // Play the valid drawn card
        currentPlayerCards.remove(drawnCard);
        centerCards.add(drawnCard);
        System.out.println("Player " + (currentPlayerIndex + 1) + " played " + drawnCard);
        }

        //exit game
        else if (input.equals("EXIT")){
            while(true){
                System.out.print("Are you sure you want so exit the game(Y/N)?: ");
                input = userInput.nextLine().toUpperCase();

                if(input.equals("Y")){
                    while(true){
                        System.out.print("Do you want to save the game(Y/N)?: ");
                        input = userInput.nextLine().toUpperCase();
                        if(input.equals("Y")){
                            saveGame(); //save game
                            break;
                        }
                        else if(input.equals("N")){
                            //quit without saving
                            System.out.println("Qutting the game...");
                            System.exit(0);
                        }
                        else{
                            System.out.println("Invalid command!");
                        }
                    }
                }

                //cancel on exiting the game
                else if(input.equals("N")){
                    playTurn(); //go back to the top of the function and play the game normally
                }

                else{
                    System.out.println("Invalid command!");
                }
            }
        }
        
        else {
            // Check if the entered card is valid
            while (!isValidPlay(input)) {
                System.out.print("Invalid card! Enter a valid card or 'draw': ");
                input = userInput.nextLine().toUpperCase();
                if (input.equals("DRAW")) {
                    // Draw cards until a valid card can be played
                    String drawnCard = drawCardFromDeck();
                    currentPlayerCards.add(drawnCard);
                    System.out.println("Player " + (currentPlayerIndex + 1) + " drew a card: " + drawnCard);
    
                    while (!isValidPlay(drawnCard)) {
                        System.out.println("Drawn card cannot be played. Drawing another card...");
                        drawnCard = drawCardFromDeck();
                        currentPlayerCards.add(drawnCard);
                        System.out.println("Player " + (currentPlayerIndex + 1) + " drew a card: " + drawnCard);
                    }
    
                    // Play the valid drawn card
                    currentPlayerCards.remove(drawnCard);
                    centerCards.add(drawnCard);
                    System.out.println("Player " + (currentPlayerIndex + 1) + " played " + drawnCard);
                    return; // Exit the function after playing the valid drawn card
                }
            }

            // Play the valid input card
            currentPlayerCards.remove(input);
            centerCards.add(input);
            System.out.println("Player " + (currentPlayerIndex + 1) + " played " + input);
        }
    
        currentPlayerIndex = (currentPlayerIndex + 1) % playersCards.size(); // Move to the next player
    
        if (centerCards.size() == playersCards.size() + 1) {
            // End of the round, determine the winner of the trick
            String winningCard = centerCards.get(0);
            String winningSuit = String.valueOf(winningCard.charAt(0));
            int winningRankIndex = getRankIndex(String.valueOf(winningCard.charAt(1)));
    
            for (String card : centerCards) {
                String suit = String.valueOf(card.charAt(0));
                int rankIndex = getRankIndex(String.valueOf(card.charAt(1)));
    
                if (suit.equals(winningSuit) && rankIndex < winningRankIndex) {
                    winningCard = card;
                    winningSuit = suit;
                    winningRankIndex = rankIndex;
                }
            }
    
            int winnerIndex = centerCards.indexOf(winningCard);
            currentPlayerIndex = (currentPlayerIndex + (winnerIndex - 1)) % playersCards.size(); // Set next player as the winner
            centerCards.clear(); // Clear the center cards

            scoreUpdated(); // Ensure scores to be updated

            currentRoundIndex++;
            System.out.println("\nTrick winner: Player " + (currentPlayerIndex + 1));
            System.out.println("Player " + (currentPlayerIndex + 1) + " starts the next trick.");
        }
        
    }

    private int getRankIndex(String rank) {
        String[] rankOrder = {"A", "K", "Q", "J", "X", "9", "8", "7", "6", "5", "4", "3", "2"};
    
        for (int i = 0; i < rankOrder.length; i++) {
            if (rank.equals(rankOrder[i])) {
                return i;
            }
        }
        return -1; // Invalid rank
    }
    
    public boolean isGameOver() {
        for (LinkedList<String> playerCards : playersCards) {
            if (playerCards.isEmpty()) {
                return true;
            }
        }
        return false;
    }

    public void saveGame() throws IOException{
        //save score
        BufferedWriter scoreFile = new BufferedWriter(new FileWriter("playersScores.txt"));

        for(int score : scores){
            scoreFile.write("\n" + score);
        }

        scoreFile.close();

        //save players card
        BufferedWriter playersCardsFile = new BufferedWriter(new FileWriter("playersCards.txt"));

        for(LinkedList<String> card : playersCards){
            playersCardsFile.write("\n" + card);
        }

        playersCardsFile.close();

        //save card deck 
        BufferedWriter cardDeckFile = new BufferedWriter(new FileWriter("cardDeck.txt"));

        for(String card : cardDeck){
            cardDeckFile.write("\n" + card);
        }

        cardDeckFile.close();

        //save current player index turn  and trick index 
        BufferedWriter playerTrickFile = new BufferedWriter(new FileWriter("playerTrick.txt"));

        playerTrickFile.write("\n" + currentPlayerIndex +", "+ (currentPlayerIndex+1) );

        playerTrickFile.close();

        //save center Cards
        BufferedWriter centerCardsFile = new BufferedWriter(new FileWriter("centerCards.txt"));

        for(String card : centerCards){
            centerCardsFile.write("\n" + card);
        }

        centerCardsFile.close();

        //exit the game after saving
        System.out.println("The game is saved. Qutting the game...");
        System.exit(0);
    }
    
    public void playGame() throws IOException {
        playersCard();
        setCenterCards();
        playerTurn();
        
        while (!isGameOver()) {
            gameStatus();
            playTurn();
        }

        System.out.println("Game over!");
        gameStatus();
    }
    
    public static void main(String[] args) throws IOException {
        Scanner userCommand = new Scanner(System.in);
        System.out.print("Enter command (s - start game / x - exit game): ");
        String choices = userCommand.nextLine();

        if (choices.equals("s")){
        GoBoom game = new GoBoom();
        game.playGame();
        }
        if(choices.equals("x")){
            System.out.println("Exit Game.");
        }
    }
}
    


